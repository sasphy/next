---
description: 
globs: 
alwaysApply: true
---
# Sashay: Solana Music Streaming Platform Architecture Overview

## Introduction

Sasphy is a decentralized music streaming platform built on the Solana blockchain that enables artists to tokenize their music using NFTs with a bonding curve pricing mechanism. The implementation uses the Metaplex standard for NFTs and includes an Anchor program for the core token factory functionality.

## Repository Structure

The repository is organized into several key components:

1. **Smart Contracts (Anchor Programs)**:
   - `music-streaming`: Basic NFT-based music track implementation
   - `music-token-factory`: Advanced token factory with bonding curve mechanics

2. **Client Libraries**:
   - `src/Sasphy-token-client.ts`: TypeScript client for interacting with the token factory
   - `src/client.ts`: General Solana interaction utilities
   - `src/metaplex.ts`: Metaplex integration for NFT creation

3. **Backend API Server**:
   - `server/index.ts`: Elysia.js API server for exposing token functionality
   - `server/modules`: API modules for tracks, auth, and payments
   - `server/services`: Backend services including Metaplex integration

4. **Testing & Deployment Scripts**:
   - `scripts`: Contains scripts for deployment, token creation, and purchases
   - `tests`: Testing infrastructure
   - `manual-testing`: Scripts for manual testing of functionality

5. **Data & Storage**:
   - `test-data`: Sample data for tracks and purchases
   - `deployment`: Production deployment information

## Core Components

### 1. Token Factory Contract (`music-token-factory`)

This is the primary smart contract that powers the music platform. It includes:

- **Bonding Curve Mechanism**: Implements four types of pricing curves (Linear, Exponential, Logarithmic, Sigmoid)
- **Fee Distribution**: Configurable fees for artists (up to 15%) and platform (up to 10%)
- **Token Operations**: Creating, buying, selling, and updating music tokens
- **Protocol Management**: Admin functions for updating platform parameters

Key interactions:
- `initialize_protocol`: Sets up the platform with initial fees and treasury
- `create_music_token`: Creates a new music token with bonding curve parameters
- `buy_tokens`: Purchases tokens with SOL following the bonding curve pricing
- `sell_tokens`: Sells tokens back to the platform, receiving SOL at a 5% slippage
- `update_token_metadata`: Updates token metadata (name, URI, active status)

### 2. Music Streaming Contract (`music-streaming`)

A simpler contract that focuses on standard NFT-based music functionality:

- **NFT Integration**: Uses Metaplex standard for NFT creation
- **Edition Support**: Creates master editions with multiple prints
- **Track Management**: Functions for creating and purchasing track editions

### 3. Client Library (`Sasphy-token-client.ts`)

A comprehensive TypeScript client for interacting with the token factory:

- **Initialization**: Sets up protocol settings and creates token factories
- **Token Operations**: Methods for buying, selling, and updating tokens
- **Price Calculation**: Functions to calculate current token prices based on bonding curves
- **Token & Protocol Info**: Methods to retrieve information about tokens and platform settings

### 4. API Server (`server/index.ts`)

An Elysia.js-based API server that exposes the token functionality:

- **RESTful Endpoints**: API for tracks, purchases, and platform information
- **Swagger Documentation**: Integrated API documentation
- **Simulation Mode**: Development mode with local data storage

## Core Features

### 1. Bonding Curve Mechanism

The platform implements four types of bonding curves:

- **Linear**: Price increases linearly with supply (P = initialPrice + supply * delta)
- **Exponential**: Price increases exponentially with supply (P = initialPrice + (supply² * delta / 10000))
- **Logarithmic**: Price increases quickly initially, then slows down
- **Sigmoid**: S-curve pricing (slow start, quick middle growth, then plateau)

### 2. NFT Token Standard

Uses Metaplex's Print Edition model:
- **Master Edition**: Created for each track, containing metadata and royalty information
- **Print Editions**: Individual copies purchased by users

### 3. Fee Distribution

For each purchase:
- Artist fee (configurable up to 15%)
- Platform fee (configurable up to 10%)
- Remainder goes to the token's liquidity pool

### 4. Storage Strategy

Hybrid approach to music storage:
- **Arweave**: Primary storage for music files with permanent, decentralized storage
- **IPFS**: Secondary storage for metadata and album artwork
- **Solana Account Storage**: Critical metadata linking tokens to music files

## Development Modes

The repository supports two main modes:

### 1. Simulation Mode

- Simulates blockchain interactions without actual transactions
- Uses local JSON files to store state
- Useful for development and testing

### 2. Live Deployment Mode

- Performs actual blockchain transactions
- Deploys contracts and creates real NFTs
- Supports devnet and mainnet-beta

## Integration Points

1. **Frontend Applications**:
   - Client library for wallet integration
   - REST API for track discovery and metadata
   - Bonding curve price calculation
   - Purchase and streaming functionality

2. **Other Services**:
   - Arweave/IPFS for decentralized storage
   - CDN for streaming optimization
   - Analytics for tracking token performance

## Deployment Information

Current deployment details:
- **Network**: Solana Devnet
- **Program ID**: 5tGHM7n1mxNEqUxEGSgC2yobV11zVUPChZ8ECEQWTwRV
- **Platform Fee**: 100 basis points (1%)
- **Sample Track**: "Sasphy Demo Track" with exponential bonding curve

## Technical Implementation Details

1. **Anchor Framework**: Used for smart contract development
2. **Bun Runtime**: Fast JavaScript runtime for the API server
3. **Elysia.js**: High-performance web framework for the API
4. **Metaplex SDK**: For NFT creation and management
5. **Coral-XYZ/Anchor**: For client interaction with Anchor programs

## Overview Diagram

```
┌─────────────────────┐
│  Frontend           │
│  Applications       │
└───────┬─────────────┘
        │
        ▼
┌─────────────────────┐         ┌─────────────────────┐
│  Sasphy API Server │◄────────►  Storage Services   │
│  (Elysia + Bun)     │         │  (Arweave/IPFS)     │
└───────┬─────────────┘         └─────────────────────┘
        │
        ▼
┌─────────────────────┐
│  Sasphy Token      │
│  Client Library     │
└───────┬─────────────┘
        │
        ▼
┌─────────────────────┐         ┌─────────────────────┐
│  Token Factory      │◄────────►  Music Streaming    │
│  Smart Contract     │         │  Smart Contract     │
└───────┬─────────────┘         └─────────────────────┘
        │
        ▼
┌─────────────────────┐
│  Solana Blockchain  │
└─────────────────────┘
```

## Notable Files

1. **Contract Implementation**:
   - `/programs/music-token-factory/src/lib.rs`: Core token factory contract
   - `/programs/music-streaming/src/lib.rs`: Music streaming NFT contract

2. **Client Library**:
   - `/src/Sasphy-token-client.ts`: Main client for token operations

3. **API Server**:
   - `/server/index.ts`: REST API implementation
   - `/server/modules`: API modules for specific functionality
   - `/server/services`: Backend service implementations

4. **Deployment & Configuration**:
   - `/Anchor.toml`: Anchor framework configuration
   - `/deployment/deployment-info.json`: Deployment information

This implementation aligns with the Sasphy project's vision of creating a decentralized music platform where artists can tokenize their music and benefit from bonding curve mechanics, while providing users with a way to invest in music they love and potentially benefit as tracks gain popularity.
